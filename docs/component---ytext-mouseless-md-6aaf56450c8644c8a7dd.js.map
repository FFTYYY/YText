{"version":3,"sources":["webpack:///../ytext_mouseless.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sRAMaA,EAAe,QAAG,0NAC/B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGC,EAAK,iBAER,OAAO,YAACJ,EAAS,eAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,cAG5E,qBAAG,sBAAQC,WAAW,KAAG,6CACzB,kBACE,GAAM,SAAO,SAEf,wEACA,yFACA,kBACE,GAAM,QAAM,QAEd,wLACsE,sBAAQA,WAAW,KAAG,MAAgB,6BAA8B,sBAAQA,WAAW,KAAG,MAAgB,8DAAiE,sBAAQA,WAAW,KAAG,QAAkB,gCACzR,kGAAmF,sBAAQA,WAAW,KAAG,QAAkB,qBAC3H,kBACE,GAAM,QAAM,QAEd,uFACA,uBAAK,oBAAMA,WAAW,OAAK,mOAK3B,kBACE,GAAM,gBAAc,gBAEtB,sDACA,uBAAK,oBAAMA,WAAW,OAAK,kWAc3B,2DACA,uBAAK,oBAAMA,WAAW,OAAK,8IAS3B,kBACE,GAAM,oBAAkB,qBAE1B,0GACA,uBAAK,oBAAMA,WAAW,OAAK,yfAiB9B,wNAEDJ,EAAWK,gBAAiB","file":"component---ytext-mouseless-md-6aaf56450c8644c8a7dd.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"E:/Coding/Projects/YText/mydoc/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><strong parentName=\"p\">{`以下是我开发的时候写的一些笔记。没有写的很严谨，不完全符合现在的版本，仅供参考。`}</strong></p>\n    <h1 {...{\n      \"id\": \"无鼠标操作\"\n    }}>{`无鼠标操作`}</h1>\n    <p>{`YText编辑器提供了一系列功能来完成无鼠标操作，这些功能也可以被整合到用户自定义的编辑器中。`}</p>\n    <p>{`无鼠标操作功能分为三个核心部件：键盘事件管理器（KeyEventManager）和无鼠标元素（KeyEventElement）。`}</p>\n    <h2 {...{\n      \"id\": \"使用方法\"\n    }}>{`使用方法`}</h2>\n    <p>{`所有无鼠标项目分成了一系列小组，每个称为一系列无鼠标项目空间，用一个唯一的字符串标志。在初始时，每个项目会在监听器处注册自己所处的空间和在这个空间中的位置，其中位置也是一个字符串。\n每个空间对应一个 ctrl + `}{`[X]`}{` 的按键组合，其中`}{`[X]`}{`是某个按键。在容器听到一个空间的按键组合按下后，会`}<strong parentName=\"p\">{`聚焦`}</strong>{`该空间中的一个合适的位置的元素，项目会向容器提供一个`}<strong parentName=\"p\">{`响应`}</strong>{`操作，如果在聚焦状态下按下enter键，则会调用该响应函数。如果松开ctrl + `}{`[X]`}{`键，则会调用元素的`}<strong parentName=\"p\">{`取消聚焦`}</strong>{`操作，但是会记录此时元素的位置，方便下次聚焦时快速启动。`}</p>\n    <p>{`如果在按下ctrl + `}{`[X]`}{`的按键组合的情况下按下方向键，则会切换空间中的位置（具体如何切换是用户定义的），此时会调用原先聚焦的元素的`}<strong parentName=\"p\">{`取消聚焦`}</strong>{`操作，并调用新聚焦元素的聚焦操作。`}</p>\n    <h2 {...{\n      \"id\": \"具体实现\"\n    }}>{`具体实现`}</h2>\n    <p>{`首先，键盘事件管理器代理slate的onKeyDown和onKeyUp函数，并使用React Context提供这两个方法。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`type OnKeyDownFunction = (event)=>boolean\ntype OnKeyUpFunction = (event)=>boolean\n\nvar KeyDownUpFunctionProxy = React.createContext<[OnKeyDownFunction | undefined,OnKeyUpFunction | undefined]>([undefined , undefined])\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"键盘事件管理器的用户输入\"\n    }}>{`键盘事件管理器的用户输入`}</h3>\n    <p>{`键盘事件管理器需要用户提供一系列成组的方法，每组方法包含:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`interface EventManagerSpaceItem{\n    /** 空间名称（匹配用字符串）。 */\n    spacename: string \n\n    /** 匹配用按键。*/\n    key: string\n\n    /** 第一次聚焦时的位置。 */\n    activate_position: (position_list: string[], cur_position: string) => number\n\n    /** 按下方向键时的聚焦切换。 */\n    switch_position: (position_list: string[], cur_position: string, direction) => number\n}\n`}</code></pre>\n    <p>{`键盘输入管理器还可以代理非无鼠标操作的操作（例如ctrl+s保存）。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`interface EventManagerNonSpaceItem{\n    \n    /** 匹配用按键。*/\n    key: string\n\n    /** 按下时操作。 */\n    on_activate: (event)=>boolean\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"键盘事件管理器和无鼠标元素的通信\"\n    }}>{`键盘事件管理器和无鼠标元素的通信。`}</h3>\n    <p>{`键盘事件管理器必须在最上层，并通过Context向无鼠标元素传递注册自身的方法，无鼠标元素需要在键盘事件管理器中注册自身的位置以及三个函数：聚焦、响应、取消聚焦。`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`/** 无鼠标元素激活操作。 */\ntype MouselessActivateOperation = ()=>void\n\n/** 无鼠标元素取消激活操作。 */\ntype MouselessUnActivateOperation = ()=>void\n\n/** 无鼠标元素响应操作。 */\ntype MouselessRun = ()=>void\n\n/** 无鼠标元素注册函数。 */\ntype MouselessRegisterFunction = ( space: string, position: string, on_activate: MouselessActivateOperation, on_unactivate: MouselessUnActivateOperation, run: MouselessRun ) => void\n\n/** 提供无鼠标元素注册函数的上下文。 */\nlet MouselessRegister = React.createContext<MouselessRegisterFunction>(()=>{})\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}